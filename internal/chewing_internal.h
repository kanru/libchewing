/*
 * Copyright (c) 2022
 *      libchewing Core Team. See ChangeLog for details.
 *
 * See the file "COPYING" for information on usage and redistribution
 * of this file.
 */

#ifndef chewing_internal_bindings_h
#define chewing_internal_bindings_h

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum KeyBehavior {
  Ignore = 0,
  Absorb,
  Commit,
  KeyError,
  Error,
  NoWord,
  OpenSymbolTable,
} KeyBehavior;

typedef enum KeyboardLayoutCompat {
  Default = 0,
  Hsu,
  Ibm,
  GinYieh,
  Et,
  Et26,
  Dvorak,
  DvorakHsu,
  DachenCp26,
  HanyuPinyin,
  ThlPinyin,
  Mps2Pinyin,
  Carpalx,
} KeyboardLayoutCompat;

typedef struct ChewingConversionEngine ChewingConversionEngine;

typedef struct Phrase Phrase;

typedef struct RefCell_LayeredDictionary RefCell_LayeredDictionary;

typedef struct SyllableEditorWithKeymap SyllableEditorWithKeymap;

struct SyllableEditorWithKeymap *NewPhoneticEditor(enum KeyboardLayoutCompat kb_type);

void FreePhoneticEditor(struct SyllableEditorWithKeymap *editor_keymap_ptr);

enum KeyBehavior PhoneticEditorInput(struct SyllableEditorWithKeymap *editor_keymap_ptr,
                                     int32_t key);

void PhoneticEditorSyllable(struct SyllableEditorWithKeymap *editor_keymap_ptr, int32_t *pho_inx);

void PhoneticEditorSyllableAlt(struct SyllableEditorWithKeymap *editor_keymap_ptr,
                               int32_t *pho_inx);

void PhoneticEditorKeyseq(struct SyllableEditorWithKeymap *editor_keymap_ptr, char *key_seq);

uint16_t PhoneticEditorSyllableIndex(struct SyllableEditorWithKeymap *editor_keymap_ptr);

uint16_t PhoneticEditorSyllableIndexAlt(struct SyllableEditorWithKeymap *editor_keymap_ptr);

void PhoneticEditorRemoveLast(struct SyllableEditorWithKeymap *editor_keymap_ptr);

void PhoneticEditorRemoveAll(struct SyllableEditorWithKeymap *editor_keymap_ptr);

int32_t PhoneticEditorKbType(struct SyllableEditorWithKeymap *editor_keymap_ptr);

bool PhoneticEditorIsEntering(struct SyllableEditorWithKeymap *editor_keymap_ptr);

struct ChewingConversionEngine *InitConversionEngine(const struct RefCell_LayeredDictionary *dict_ptr);

void TerminateConversionEngine(struct ChewingConversionEngine *ce_ptr);

void ConversionEngineDoPhrasing(void *pgdata,
                                struct ChewingConversionEngine *ce_ptr,
                                uint16_t *syllables_u16_ptr,
                                uintptr_t syllables_len,
                                char (*select_strs_ptr)[201],
                                IntervalType *select_intervals_ptr,
                                uintptr_t select_len,
                                int *breaks_u16_ptr,
                                uintptr_t breaks_len,
                                IntervalType *display_intervals_ptr,
                                int *display_intervals_len);

const void *InitDict(char *prefix);

void TerminateDict(const void *dict_ptr);

void *GetCharFirst(const void *dict_ptr, struct Phrase *phrase_ptr, uint16_t syllable_u16);

void *GetPhraseFirst(void *vec_ptr, struct Phrase *phrase_ptr);

void *TreeFindPhrase(const void *dict_ptr, int begin, int end, uint16_t *syllables_u16);

void *GetVocabNext(void *iter_ptr, struct Phrase *phrase_ptr);

char *GetDefaultUserPhrasePath(void *_data);

void FreeDefaultUserPhrasePath(char *path);

void *InitUserphrase(char *path);

void TerminateUserphrase(void *ptr);

void *UserGetPhraseFirst(void *ue_ptr, void *userphrase_data_ptr, uint16_t *syllables_u16_ptr);

void *UserGetPhraseNext(void *iter_ptr, void *userphrase_data_ptr);

uint8_t UserUpdatePhrase(void *ue_ptr, uint16_t *syllables_u16_ptr, char *phrase_str_ptr);

bool UserRemovePhrase(void *ue_ptr, uint16_t *syllables_u16_ptr, char *phrase_str_ptr);

void IncreaseLifeTime(void *ue_ptr);

void UserUpdatePhraseBegin(void*);

void UserGetPhraseEnd(void*, void*);

void *UserEnumeratePhrase(void *ue_ptr);

bool UserEnumerateHasNext(void *iter_ptr, unsigned int *phrase_len_ptr, unsigned int *bopomofo_len);

int UserEnumerateGet(void *iter_ptr,
                     char *phrase_buf,
                     const unsigned int *_phrase_len_ptr,
                     char *bopomofo_buf,
                     const unsigned int *_bopomofo_len);

#endif /* chewing_internal_bindings_h */
