/*
 * Copyright (c) 2022
 *      libchewing Core Team. See ChangeLog for details.
 *
 * See the file "COPYING" for information on usage and redistribution
 * of this file.
 */

#ifndef chewing_public_bindings_h
#define chewing_public_bindings_h

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/** @brief context handle used for Chewing IM APIs
 */
typedef struct ChewingContext ChewingContext;


#define CHINESE_MODE 1

#define SYMBOL_MODE 0

#define FULLSHAPE_MODE 1

#define HALFSHAPE_MODE 0

#define AUTOLEARN_DISABLED 1

#define AUTOLEARN_ENABLED 0

#define MIN_SELKEY 1

#define MAX_SELKEY 10

#define CHEWING_LOG_VERBOSE 1

#define CHEWING_LOG_DEBUG 2

#define CHEWING_LOG_INFO 3

#define CHEWING_LOG_WARN 4

#define CHEWING_LOG_ERROR 5

/**
 * Use "asdfjkl789" as selection key
 */
#define HSU_SELKEY_TYPE1 1

/**
 * Use "asdfzxcv89" as selection key
 */
#define HSU_SELKEY_TYPE2 2

typedef enum KB {
  KB_DEFAULT,
  KB_HSU,
  KB_IBM,
  KB_GIN_YIEH,
  KB_ET,
  KB_ET26,
  KB_DVORAK,
  KB_DVORAK_HSU,
  KB_DACHEN_CP26,
  KB_HANYU_PINYIN,
  KB_THL_PINYIN,
  KB_MPS2_PINYIN,
  KB_CARPALX,
  KB_COUNT,
} KB;

/**
 * Deprecated, use chewing_set_ series of functions to set parameters instead.
 */
typedef struct ChewingConfigData {
  int candPerPage;
  int maxChiSymbolLen;
  int selKey[MAX_SELKEY];
  int bAddPhraseForward;
  int bSpaceAsSelection;
  int bEscCleanAllBuf;
  int bAutoShiftCur;
  int bEasySymbolInput;
  int bPhraseChoiceRearward;
  int bAutoLearn;
  int hsuSelKeyType;
} ChewingConfigData;

typedef struct IntervalType {
  int from;
  int to;
} IntervalType;

#endif /* chewing_public_bindings_h */
